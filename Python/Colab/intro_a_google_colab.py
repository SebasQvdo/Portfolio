# -*- coding: utf-8 -*-
"""Intro a Google Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jxxUlNZkdQFkXHDtp0Sc1tlG3wn3CiZl
"""

print("Hello World")

def print_anything():
  message = input("Type something: ")
  print(message)

print_anything()

from os.path import split
def sum_all_nums():
  nums = input("Enter a list of numbers, separated by commas: ")
  numslist = nums.split(",")
  sumnums = sum([int(num) for num in numslist])
  print(sumnums)

sum_all_nums()

#This is a comment
# Boolean operations
A = 1
B = 5
compare = A > B
compare

import pandas as pd

penguins_data = pd.read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv")

# Imprimir las primeras 4 filas del conjunto de datos
penguins_data.head(4)

penguins_data['bill_depth_mm']

columns_penguins_data = penguins_data[['bill_depth_mm', 'species', 'island']]
columns_penguins_data.head(4)

rows_penguins_data = penguins_data.loc[2:5]
rows_penguins_data

sub_rows_pdata = penguins_data.loc[2:5, ['bill_depth_mm', 'species', 'island']]
sub_rows_pdata

import matplotlib.pyplot as plt
import seaborn as sns

# Estructura genérica de un gráfico
'''
plt.figure(figsize=(width, height))
sns.plottype(data=my_data, x='Variable1',y='Variable2', hue='Variable3', moreoptions)
plt.title('Título')
plt.xlabel('Etiqueta del eje x')
plt.ylabel('Etiqueta del eje y')
plt.moreoptions()
plt.show()
'''

#¿Existe una diferencia entre la longitud y la profundidad del pico en las distintas especies de pingüinos?
plt.figure(figsize=(6, 4)) #Establece el tamaño de la figura
sns.scatterplot(data=penguins_data, x='bill_length_mm', y='bill_depth_mm', hue='species') #Define el tipo de gráfica
plt.show() #Muestra la figura

#¿Existe una diferencia entre la longitud y la profundidad del pico en las distintas especies de pingüinos?
plt.figure(figsize=(6, 4)) #Establece el tamaño de la figura
sns.scatterplot(data=penguins_data, x='bill_length_mm', y='bill_depth_mm', hue='species') #Define el tipo de gráfica
plt.title('Longitud vs profundidad del pico') #Establece el título del gráfico
plt.xlabel('Longitud del pico') #Establece la etiqueta del eje x
plt.ylabel('Profundidad del pico') #Establece la etiqueta del eje y
plt.legend(title='Especies') #Establece la leyenda
plt.xticks(fontsize=10) #Establece el tamaño de las etiquetas del eje x
plt.yticks(fontsize=10) #Establece el tamaño de las etiquetas del eje y
plt.show() #Muestra la figura

#
#
#
#
#
#
#
#
#
#
#
#
##### DIVISION #####
#
#
#
#
#
#
#
#
#
#
#
#

(penguins_data
 .filter(['species', 'body_mass_g', 'sex'], axis = 1)
 ).head() #Filtrar columnas y se usa axis=1

(penguins_data
 .filter([0,10], axis = 0)
 ).head() #Filtrar filas y se usa axis=0

(penguins_data
 .filter(range(5), axis = 0)
 ) #Filtrar conjunto de filas a nivel fila, o sea axis=0

(penguins_data
 .query('species == "Gentoo"')
) #Se usa query para consultar / pedirle a la base de datos algo en específico

(penguins_data
 .query('body_mass_g > 5000')
).head() #Igual se puede filtrar con .query() para hacer un análisis

(penguins_data
 .query('bill_length_mm >= 45')
).head()

(penguins_data
 .filter(['species', 'body_mass_g', 'sex'], axis = 1)
 .query('species == "Gentoo"')
 ).head(3) #Se pueden unir las dos prácticas para filtrar aún más la base de datos

(penguins_data
 .query('species == "Gentoo" & body_mass_g < 5700')
 ).tail(7) #Últimos 7 registros de los Gentoo con una masa corporal menor a 5700g

(penguins_data
 .assign(LDRatio = lambda df: df['bill_length_mm'] / df['bill_depth_mm'])
 ) #Creamos función anónima para hacer nueva columna, usamos df como data frame para que sea asignado a penguins_data

(penguins_data
 .assign(LDRatio = lambda df: df['bill_length_mm'] / df['bill_depth_mm'])
 .filter(['bill_length_mm', 'bill_depth_mm', 'LDRatio'], axis = 1)
 ).head()

(penguins_data
 .sort_values('bill_length_mm', ascending = False)
 ).head(3) #Arreglamos los valores con .sort_values()

(penguins_data
 .filter(['bill_length_mm', 'bill_depth_mm', 'body_mass_g'], axis = 1)
 .agg(['mean'])
 ) #.agg() muestra alguna variable estadística para tu tabla

mean_penguins_data = (penguins_data
 .filter(['bill_length_mm', 'bill_depth_mm', 'body_mass_g'], axis = 1)
 .agg(['mean'])
 )

mean_penguins_data #Lo podemos hacer una variable/función para guardarlo

