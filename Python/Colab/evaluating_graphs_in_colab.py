# -*- coding: utf-8 -*-
"""Evaluating Graphs in Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VUuuw_CyJXqYHFFMvlhTfIcI_0mbCbgX
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

auto_data = pd.read_excel('/content/drive/MyDrive/Work 2/5to Semestre/Visualización de Datos/auto_dataset.xlsx')
auto_data.head()

#Scatter plot distribution of data
plt.figure(figsize=(7,5))
sns.scatterplot(data=auto_data, x = 'weight', y = 'mpg', color = 'darkblue', marker = 'o', s = 50)

#Establish from the limits of the y axis
plt.ylim(0,50)
#Establish from the limits of the x axis
plt.xlim(0,5500)

#Personalize the graph with better visuals
plt.title('Relationship between Weight and MPG')
plt.xlabel('Weight (lbs)', fontsize=12)
plt.ylabel('MPG', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Histogram (weight)
plt.figure(figsize=(7,5))
sns.histplot(data=auto_data, x = 'weight', color = 'darkblue', kde = True, bins = 15)

#Personalize the graph with better visuals
plt.title('Distribution of Weight')
plt.xlabel('Weight (lbs)', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Histogram (MPG)
plt.figure(figsize=(7,5))
sns.histplot(data=auto_data, x = 'mpg', color = 'darkblue', kde = True, bins = 15)

#Personalize the graph
plt.title('Distribution of MPG')
plt.xlabel('MPG', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Boxplot of car data
plt.figure(figsize=(7,5))
sns.boxplot(data=auto_data, x = 'origin', y = 'mpg', color = 'lightgreen')

#Personalize the graph with better visuals
plt.title('Distribution of Price and MPG')
plt.xlabel('MPG', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#More personalized boxplot
plt.figure(figsize=(7,5))
sns.boxplot(data=auto_data, x = 'origin', y = 'mpg', color = 'lightgreen',
            linewidth = 1.5, fliersize = 5, boxprops = dict(alpha = 0.5),
            whiskerprops = dict(alpha = 0.5), medianprops = dict(alpha = 0.5),
            showmeans = True, flierprops = dict(alpha = 0.5, color = 'red',
                                                marker = 'o', markerfacecolor = 'purple',
                                                markersize = 8),
            meanprops = dict(color = 'black'))

#Personalize the graph
plt.title('Distribution of Price and MPG')
plt.xlabel('MPG', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Scatterplot of distribution of car weight per MPG with color separation specifying origin
plt.figure(figsize=(7,5))
sns.scatterplot(data=auto_data, x = 'weight', y = 'mpg', hue = 'origin', palette = 'Set1',
                marker = 'o', s = 50)

#Personalize the graph with better visuals
plt.title('Relationship between Weight and MPG')
plt.xlabel('Weight (lbs)', fontsize=12)
plt.ylabel('MPG', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Dividing scatterplot in 3 graphs, each one showcasing a different origin
plt.figure(figsize=(12,6))
g = sns.FacetGrid(auto_data, col = 'origin', col_wrap = 3, height = 4, aspect = 1)
g.map(sns.scatterplot, 'weight', 'mpg', color = 'darkblue', marker = 'o', s = 50)

#Personalizing the graphs
g.set_axis_labels('Weight (lbs)', 'MPG')
g.set_titles(col_template = '{col_name}')
g.set_xticklabels(fontsize = 6)
g.set_yticklabels(fontsize = 6)

#Rotating labels for better viewing
for ax in g.axes.flat:
    ax.set_xlabel('Weight (lbs)', fontsize=12)
    ax.set_ylabel('MPG', fontsize=12)
    ax.tick_params(axis='both', labelsize=10, rotation = 90)

#Display graph
plt.show()

sum_auto = (auto_data
            .filter(['mpg', 'origin'], axis = 1)
            .groupby('origin')
            .agg(meanMPG = ('mpg', 'mean'))
            .reset_index()
            .round(2)
            )
sum_auto

#Scatterplot diagram of Cleveland
plt.figure(figsize=(7,5))
sns.scatterplot(data=sum_auto, x = 'origin', y = 'meanMPG', color = 'pink', marker = 'o', s = 100)

#Personalize the graph
plt.title('Mean MPG per Origin')
plt.xlabel('Origin', fontsize=12)
plt.ylabel('Mean MPG', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(0,35) #Establish an axis limit on the y axis
plt.grid(True)

#Plot graph
plt.show()

#Bar graph displaying the same thing
plt.figure(figsize=(7,5))
sns.barplot(data=sum_auto, x = 'origin', y = 'meanMPG', color = 'red')

#Personalize the graph
plt.title('Mean MPG per Origin', fontsize = 14)
plt.xlabel('Origin', fontsize=12)
plt.ylabel('Mean MPG', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(0,35) #Establish an axis limit on the y axis

#Plot graph
plt.show()

spotify_data = pd.read_excel('/content/drive/MyDrive/Work 2/5to Semestre/Visualización de Datos/spotify.xlsx')
spotify_data.head()

#Line graph of how the song Despacito by Luis Fonsi has been reproduced during the years
plt.figure(figsize=(7,5))
sns.lineplot(data=spotify_data, x = 'Date', y = 'Despacito', color = 'darkgreen', linewidth = 1.5, linestyle = '-')

#Personalize the graph with better visuals
plt.title('Reproductions of Despacito by Luis Fonsi')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Reproductions', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)

#Display graph
plt.show()

#Graphing multiple lines
data_lines = spotify_data.melt(id_vars = ['Date'],
                               value_vars = ['Shape of You', 'Despacito', 'Something Just Like This', 'HUMBLE.', 'Unforgettable'],
                               var_name = 'Song',
                               value_name = 'Reproductions')

data_lines.head()

#Now create multiple graphs for each song using the recently used method
plt.figure(figsize=(8,6))
g = sns.FacetGrid(data_lines, col = 'Song')
g.map(sns.lineplot, 'Date', 'Reproductions', color = 'darkgreen', linewidth = 1.5, linestyle = '-')

#Personalize the graph
g.set_axis_labels('Date', 'Reproductions')
g.set_titles(col_template = 'Song: {col_name}')
g.set_xticklabels(fontsize = 6, rotation = 90)
g.set_yticklabels(fontsize = 6)

#Rotating labels
for ax in g.axes.flat:
    ax.set_xlabel('Date', fontsize=12)
    ax.set_ylabel('Reproductions', fontsize=12)
    ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)

#Display graph
plt.show()

#Another option is to combine them into one graph using the legend to divide them
plt.figure(figsize=(8,6))
sns.lineplot(data=data_lines, x = 'Date', y = 'Reproductions', hue = 'Song', palette = 'Set1',
             linewidth = 1.5, linestyle = '-')

#Personalize the graph
plt.title('Reproductions of Songs')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Reproductions', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(0,25000000)

#Display graph
plt.show()

penguins_data = pd.read_excel('/content/drive/MyDrive/Work 2/5to Semestre/Visualización de Datos/penguins.xlsx')
penguins_data.head()
#Remove NaN data
penguins_data = penguins_data.dropna()

#Make sure variables are specified as categorical
penguins_data[['species', 'island', 'sex']] = (penguins_data
                                               .filter(['species', 'island', 'sex'])
                                               .astype('category')
                                               )

#Histogram of penguins' species per island
plt.figure(figsize=(8,6))
sns.histplot(data=penguins_data, x = 'species', hue = 'island', multiple = 'stack')

#Personalize the graph with better visuals
plt.title('Species of Penguins')
plt.xlabel('Species', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

#Display graph
plt.show()

#Using parallel bar graphs
plt.figure(figsize=(8,6))
sns.countplot(data=penguins_data, x = 'species', hue = 'island')

#Personalize the graph
plt.title('Distribution of Penguin Species per Island', fontsize = 14)
plt.xlabel('Species', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

#Display graph
plt.show()

#Statistic Summaries
count_data = (penguins_data
              .groupby(['island', 'species'])
              .size()
              .reset_index(name = 'count')
              .sort_values(by = 'count', ascending = False)
              )

#Show the result
print(count_data)

#Calculating relative frequency
rel_freq_table = (penguins_data
                  .groupby(['island', 'species'])
                  .size()
                  .reset_index(name = 'count')
                  .assign(Proportion = lambda df: df['count'] / df['count'].sum())
                  )

# Showing relative frequency table
print(rel_freq_table)

#Custom 4 variable scatterplot
plt.figure(figsize=(9,6))
sns.scatterplot(data=penguins_data, x = 'bill_depth_mm', y = 'bill_length_mm', hue = 'species', size = 'island',
                marker = 'o', s = 50)
#Personalize the graph
plt.title('Relationship between Bill Depth and Bill Length')
plt.xlabel('Bill Depth (mm)', fontsize=12)
plt.ylabel('Bill Length (mm)', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

#Display graph
plt.show()

###
###
###
#.   Extra Graphs   .#
###
###
###

sns.set_theme(style="darkgrid")

# Adding a new column to classify popular songs
spotify_data['Popular'] = spotify_data['Despacito'] > spotify_data['Despacito'].mean()

# Recreate data_lines from spotify_data to ensure a clean merge
data_lines = spotify_data.melt(id_vars = ['Date', 'Popular'],
                               value_vars = ['Shape of You', 'Despacito', 'Something Just Like This', 'HUMBLE.', 'Unforgettable'],
                               var_name = 'Song',
                               value_name = 'Reproductions')

# Plot the responses for different Songs and its Popularity
sns.lineplot(x="Date", y="Reproductions",
             hue="Song", style="Popular",
             errorbar='sd', data=data_lines)

# Personalize the graph
plt.title('Reproductions of Songs', fontsize = 16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Reproductions', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylim(0,25000000)

# Display graph
plt.show()

#New graph for penguin_data
plt.figure(figsize=(8,6))

#Create a new column based on bill depth
penguins_data['Above Average Bill Depth'] = penguins_data['bill_depth_mm'] > penguins_data['bill_depth_mm'].mean()

sns.scatterplot(data=penguins_data, x = 'body_mass_g', y = 'bill_length_mm',
             hue = 'species', style = 'Above Average Bill Depth',
             s = 50, marker = 'o')

#Personalize the graph
plt.title('Relationship between Body Mass and Bill Length')
plt.xlabel('Body Mass (g)', fontsize=12)
plt.ylabel('Bill Length (mm)', fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.axhline(y=penguins_data['bill_length_mm'].mean(),
            color='black', linestyle='--') #Divisor line

#Display graph
plt.show()

